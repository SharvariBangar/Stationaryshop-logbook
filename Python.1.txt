
    import tkinter as tk
from tkinter import messagebox
from tkinter import ttk

# Initialize the application window
root = tk.Tk()
root.title("Stationery Shop Logbook")
root.geometry("400x400")

# List of items and their prices
items_prices = {
    "Pencil": 10,
    "Pen": 15,
    "Eraser": 20,
    "Scale": 20,
    "Sharpener": 10,
    "Chocolate": 20,
    "File": 15,
    "Notebook": 30,
    "Paper (per bag)": 100
}

# Global variable to keep track of expenses
shop_expenses = 0

# List to store items purchased in each transaction
transaction_items = []

# Function to update price when item is selected
def update_price(event=None):
    selected_item = combo_item.get()
    if selected_item:
        entry_price.delete(0, tk.END)
        entry_price.insert(0, str(items_prices[selected_item]))

# Function to add item to transaction
def add_item():
    try:
        # Get the values from the input fields
        item_name = combo_item.get()
        item_price = float(entry_price.get())
        item_quantity = int(entry_quantity.get())

        # Calculate total price for the item (price * quantity)
        total_item_price = item_price * item_quantity
       
        # Store the item in the transaction list
        transaction_items.append({
            "item": item_name,
            "price": item_price,
            "quantity": item_quantity,
            "total": total_item_price
        })

        # Display item in the listbox
        listbox_items.insert(tk.END, f"{item_name} x{item_quantity} - ₹{total_item_price:.2f}")

        # Reset quantity field
        entry_quantity.delete(0, tk.END)
    except ValueError:
        messagebox.showerror("Input Error", "Please enter valid price and quantity values.")

# Function to calculate the total bill and update expenses
def calculate_total():
    global shop_expenses

    # Calculate total bill for this transaction
    total_bill = sum(item["total"] for item in transaction_items)
   
    # Update the total expenses of the shop
    shop_expenses += total_bill
   
    # Display the total bill and expenses
    label_total.config(text=f"Total Bill: ₹{total_bill:.2f}")
    label_expenses.config(text=f"Shop Expenses: ₹{shop_expenses:.2f}")
   
    # Clear the current transaction
    transaction_items.clear()
    listbox_items.delete(0, tk.END)

# Function to clear the transaction
def clear_transaction():
    global transaction_items
    transaction_items.clear()
    listbox_items.delete(0, tk.END)
    label_total.config(text="Total Bill: ₹0.00")

# Create input fields and labels
label_item = tk.Label(root, text="Item Name:")
label_item.grid(row=0, column=0, pady=5)

# Dropdown for selecting items
combo_item = ttk.Combobox(root, values=list(items_prices.keys()))
combo_item.grid(row=0, column=1, pady=5)
combo_item.bind("<<ComboboxSelected>>", update_price)

label_price = tk.Label(root, text="Item Price:")
label_price.grid(row=1, column=0, pady=5)

entry_price = tk.Entry(root, state="readonly")
entry_price.grid(row=1, column=1, pady=5)

label_quantity = tk.Label(root, text="Quantity:")
label_quantity.grid(row=2, column=0, pady=5)

entry_quantity = tk.Entry(root)
entry_quantity.grid(row=2, column=1, pady=5)

# Buttons for adding items and calculating total
button_add = tk.Button(root, text="Add Item", command=add_item)
button_add.grid(row=3, columnspan=2, pady=5)

button_calculate = tk.Button(root, text="Calculate Total", command=calculate_total)
button_calculate.grid(row=4, columnspan=2, pady=5)

button_clear = tk.Button(root, text="Clear Transaction", command=clear_transaction)
button_clear.grid(row=5, columnspan=2, pady=5)

# Listbox to display items in the current transaction
listbox_items = tk.Listbox(root, width=40, height=6)
listbox_items.grid(row=6, columnspan=2, pady=5)

# Labels for displaying total bill and shop expenses
label_total = tk.Label(root, text="Total Bill: ₹0.00")
label_total.grid(row=7, columnspan=2, pady=5)

label_expenses = tk.Label(root, text="Shop Expenses: ₹0.00")
label_expenses.grid(row=8, columnspan=2, pady=5)

# Start the GUI event loop
root.mainloop()